class Solution {
public:
    map<vector<int>, int> mp; // Memoization map to store computed results for each set of needs

    int shoppingOffers(vector<int>& price, vector<vector<int>>& special, vector<int>& needs) {
        int n = price.size(); // Number of different items
        int m = special.size(); // Number of special offers

        // Check if the current set of needs has already been computed
        if (mp.count(needs)) {
            return mp[needs]; // Return the stored result if available
        }

        int ans = 0;
        // Calculate the cost without using any special offers
        for (int i = 0; i < needs.size(); ++i) {
            ans += price[i] * needs[i]; // Calculate cost for each item at regular price
        }

        // Iterate through each special offer
        for (int i = 0; i < m; ++i) {
            bool flag = true;

            // Check if the current special offer can be applied
            for (int j = 0; j < n; ++j) {
                if (needs[j] < special[i][j]) {
                    flag = false;
                    break;
                }
            }

            if (flag) {
                // Apply the special offer
                for (int j = 0; j < n; ++j) {
                    needs[j] -= special[i][j]; // Update needs after applying the offer
                }

                // Recursive call to compute the cost after applying the special offer
                int offerCost = special[i].back(); // Cost of the special offer
                int costAfterOffer = offerCost + shoppingOffers(price, special, needs);
                ans = min(ans, costAfterOffer); // Update minimum cost found

                // Restore needs after evaluating the offer
                for (int j = 0; j < n; ++j) {
                    needs[j] += special[i][j]; // Restore needs back to original state
                }
            }
        }

        // Memoize the result for the current set of needs
        mp[needs] = ans;

        return ans; // Return the minimum cost to satisfy the needs
    }
};



/* ---------------------------------------------------------------------------------------------------

// Approach -02 recursively 

class Solution {
public:
    int n, m;
    
    // Recursive function to solve the shopping offers problem
    int solve(int ind, vector<int>& price, vector<vector<int>>& special, vector<int>& needs) {
        // Base case: if all special offers have been considered
        if (ind == special.size()) {
            // Calculate total cost without using any special offers
            int total = 0;
            for (int i = 0; i < needs.size(); i++) {
                total += price[i] * needs[i]; // Calculate cost for each item at regular price
            }
            return total; // Return the total cost without using special offers
        }
        
        // Initially assume we won't take this special offer
        int not_take = solve(ind + 1, price, special, needs); // Recursive call without taking the current offer
        
        // Check if we can take the current offer
        bool canTake = true;
        int take = INT_MAX; // Variable to store cost if we take the current offer
        for (int j = 0; j < n; j++) { // Check if all items in the offer can be fulfilled
            if (needs[j] < special[ind][j]) { // If special offer contains more item than needed then we dont took this offer 
                canTake = false; // Cannot take this offer
                break;
            }
        }
        
        if (canTake) {
            // Take the current offer
            for (int j = 0; j < n; j++) {
                needs[j] -= special[ind][j]; // Reduce the needs by the quantity in the current offer
            }
            
            take = special[ind][n] + solve(ind, price, special, needs); // Update take with the cost of the current offer
            
            // Restore needs after recursive call (backtracking)
            for (int j = 0; j < n; j++) {
                needs[j] += special[ind][j]; // Restore the needs back to the original state
            }
        }
        
        // Return the minimum cost between not taking and taking the current offer
        return min(not_take, take);
    }
    
    int shoppingOffers(vector<int>& price, vector<vector<int>>& special, vector<int>& needs) {
        n = price.size(); // Number of different items
        m = special.size(); // Number of special offers
        
        return solve(0, price, special, needs); // Start recursive solution from the first special offer
    }
};

------------------------------------------------------------------------------*/
